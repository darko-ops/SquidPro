name: SquidPro CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create uploads directory
      run: mkdir -p uploads

    - name: Clean previous containers and volumes
      run: |
        docker compose down -v 2>/dev/null || true
        docker system prune -f

    - name: Start services with fresh database
      run: |
        docker compose up -d --build
        sleep 25

    - name: Verify database initialization
      run: |
        echo "Checking if suppliers table exists:"
        docker exec squidpro-postgres-1 psql -U squidpro -d squidpro -c "\dt" | grep suppliers || {
          echo "Suppliers table missing, manually running schema..."
          docker exec squidpro-postgres-1 psql -U squidpro -d squidpro -f /docker-entrypoint-initdb.d/schema.sql
        }

    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8100/health; do echo "Waiting..."; sleep 5; done'

    - name: Test supplier registration
      run: |
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:8100/suppliers/register \
          -H "Content-Type: application/json" \
          -d '{
            "name": "CI Test Supplier",
            "email": "ci-test@example.com",
            "stellar_address": "GDXDSB444OLNDYOJAVGU3JWQO4BEGQT2MCVTDHLOWORRQODJJXO3GBDU"
          }')
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        JSON_RESPONSE=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Supplier registration successful"
          echo "API_KEY=$(echo "$JSON_RESPONSE" | jq -r '.api_key')" >> $GITHUB_ENV
        else
          echo "❌ Registration failed with HTTP $HTTP_CODE: $JSON_RESPONSE"
          exit 1
        fi

    - name: Test clean data upload
      run: |
        echo "symbol,price" > test_clean.csv
        echo "BTC,67500" >> test_clean.csv
        
        RESPONSE=$(curl -s -X POST http://localhost:8100/suppliers/upload \
          -H "X-API-Key: $API_KEY" \
          -F "file=@test_clean.csv" \
          -F "name=CI Test Upload")
        
        if echo "$RESPONSE" | jq -e '.package_id' > /dev/null; then
          echo "✅ Clean upload successful"
        else
          echo "❌ Upload failed: $RESPONSE"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: docker compose down -v
