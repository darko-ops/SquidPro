name: SquidPro CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create uploads directory
      run: mkdir -p uploads

    - name: Start services
      run: |
        docker compose up -d --build
        sleep 20

    - name: Check service status
      run: |
        echo "Checking running containers:"
        docker compose ps
        echo "Checking logs:"
        docker compose logs --tail=20

    - name: Wait for API to be ready
      run: |
        echo "Waiting for API health check..."
        timeout 120 bash -c 'until curl -f http://localhost:8100/health; do echo "Waiting..."; sleep 5; done'
        echo "API health check passed"

    - name: Test API endpoints
      run: |
        echo "Testing health endpoint:"
        curl -v http://localhost:8100/health
        
        echo "Testing packages endpoint:"
        curl -v http://localhost:8100/packages

    - name: Test supplier registration
      run: |
        echo "Attempting supplier registration..."
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:8100/suppliers/register \
          -H "Content-Type: application/json" \
          -d '{
            "name": "CI Test Supplier",
            "email": "ci-test@example.com",
            "stellar_address": "GDXDSB444OLNDYOJAVGU3JWQO4BEGQT2MCVTDHLOWORRQODJJXO3GBDU"
          }')
        
        echo "Raw response:"
        echo "$RESPONSE"
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        JSON_RESPONSE=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
        
        echo "HTTP Code: $HTTP_CODE"
        echo "JSON Response: $JSON_RESPONSE"
        
        if [ "$HTTP_CODE" = "200" ]; then
          if echo "$JSON_RESPONSE" | jq -e '.api_key' > /dev/null; then
            echo "Supplier registration successful"
            echo "API_KEY=$(echo "$JSON_RESPONSE" | jq -r '.api_key')" >> $GITHUB_ENV
          else
            echo "Registration returned 200 but invalid JSON"
            exit 1
          fi
        else
          echo "Registration failed with HTTP code: $HTTP_CODE"
          echo "Response: $JSON_RESPONSE"
          exit 1
        fi

    - name: Cleanup
      if: always()
      run: |
        echo "Container logs before cleanup:"
        docker compose logs --tail=50
        docker compose down -v
# Trigger new workflow
