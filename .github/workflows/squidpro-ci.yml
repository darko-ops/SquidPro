name: SquidPro CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggers

env:
  SQUIDPRO_SECRET: ci_test_secret_12345
  PRICE_PER_QUERY_USD: 0.005
  SUPPLIER_SPLIT: 0.7
  REVIEWER_SPLIT: 0.2
  SQUIDPRO_SPLIT: 0.1
  DATABASE_URL: postgresql://squidpro:testpassword@localhost:5432/squidpro
  STELLAR_SECRET_KEY: SAMPLEKEY123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890AB
  STELLAR_NETWORK: testnet
  USDC_ASSET_CODE: USDC
  USDC_ASSET_ISSUER: GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5

jobs:
  # Stage 1: Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 bandit safety
          pip install -r squidpro-api/requirements.txt

      - name: Run code linting
        run: |
          flake8 squidpro-api/app.py --max-line-length=120 --ignore=E501,W503
          echo "✅ Code linting passed"

      - name: Security scan
        run: |
          bandit -r squidpro-api/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
          echo "✅ Security scan completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Stage 2: Database Tests
  database-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: squidpro
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: squidpro
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U squidpro; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "✅ PostgreSQL is ready"

      - name: Initialize database schema
        run: |
          PGPASSWORD=testpassword psql -h localhost -U squidpro -d squidpro -f squidpro-api/schema.sql
          echo "✅ Database schema initialized"

      - name: Verify database structure
        run: |
          PGPASSWORD=testpassword psql -h localhost -U squidpro -d squidpro -c "
          SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public';
          SELECT 'suppliers: ' || COUNT(*) FROM suppliers;
          SELECT 'data_packages: ' || COUNT(*) FROM data_packages;
          SELECT 'balances: ' || COUNT(*) FROM balances;
          "
          echo "✅ Database verification completed"

  # Stage 3: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r squidpro-api/requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Create unit tests
        run: |
          mkdir -p tests
          cat > tests/test_units.py << 'EOF'
          import pytest
          import sys
          import os
          sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'squidpro-api'))

          from app import PII_PATTERNS, PIIDetector
          import pandas as pd
          from io import StringIO

          def test_pii_detection():
              detector = PIIDetector()
              
              # Test email detection
              findings = detector.scan_text("Contact john@example.com for info")
              assert len(findings) > 0
              assert findings[0]['type'] == 'email'
              
              # Test phone detection
              findings = detector.scan_text("Call 555-123-4567")
              assert len(findings) > 0
              assert findings[0]['type'] == 'phone'
              
              print("✅ PII detection tests passed")

          def test_pii_dataframe_scanning():
              detector = PIIDetector()
              
              csv_data = """name,email,phone
              John,john@test.com,555-123-4567
              Jane,jane@test.com,555-987-6543"""
              
              df = pd.read_csv(StringIO(csv_data))
              analysis = detector.scan_dataframe(df)
              
              assert analysis['total_findings'] > 0
              assert 'email' in analysis['findings_by_type']
              assert 'phone' in analysis['findings_by_type']
              
              print("✅ DataFrame PII scanning tests passed")

          def test_pii_masking():
              detector = PIIDetector()
              
              masked = detector._mask_value("555-123-4567", "phone")
              assert "***" in masked
              assert "4567" in masked
              
              print("✅ PII masking tests passed")

          if __name__ == "__main__":
              test_pii_detection()
              test_pii_dataframe_scanning()
              test_pii_masking()
          EOF

      - name: Run unit tests
        run: |
          cd tests
          python test_units.py
          echo "✅ Unit tests completed"

  # Stage 4: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [database-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: squidpro
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: squidpro
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Set up Node.js (for collector-crypto)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r squidpro-api/requirements.txt

      - name: Initialize database
        run: |
          PGPASSWORD=testpassword psql -h localhost -U squidpro -d squidpro -f squidpro-api/schema.sql
          echo "✅ Database initialized"

      - name: Start collector-crypto service
        run: |
          cd collector-crypto
          npm init -y
          npm install fastify
          nohup python app.py &
          sleep 5
          echo "✅ Collector crypto started"
        env:
          SEED: 42

      - name: Start SquidPro API
        run: |
          cd squidpro-api
          mkdir -p uploads
          nohup uvicorn app:api --host 0.0.0.0 --port 8100 &
          sleep 10
          echo "✅ SquidPro API started"
        env:
          COLLECTOR_CRYPTO_URL: http://localhost:8200

      - name: Wait for services
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8100/health > /dev/null 2>&1; then
              echo "✅ SquidPro API is ready"
              break
            fi
            echo "Waiting for SquidPro API... ($i/30)"
            sleep 2
          done

      - name: Run comprehensive integration tests
        run: |
          chmod +x .github/scripts/integration-tests.sh
          .github/scripts/integration-tests.sh

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            test-results.json
            uploads/

  # Stage 5: End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: squidpro
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: squidpro
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and start full stack
        run: |
          # Override DATABASE_URL for GitHub Actions
          export DATABASE_URL=postgresql://squidpro:testpassword@host.docker.internal:5432/squidpro
          docker-compose up -d --build
          
          # Wait for services
          sleep 30
          
          # Verify all containers are running
          docker-compose ps
          
          # Initialize database through container
          docker-compose exec -T postgres psql -U squidpro -d squidpro -f /docker-entrypoint-initdb.d/schema.sql || true

      - name: Run end-to-end tests
        run: |
          chmod +x .github/scripts/e2e-tests.sh
          .github/scripts/e2e-tests.sh

      - name: Collect container logs
        if: always()
        run: |
          docker-compose logs > docker-logs.txt
          
      - name: Upload E2E artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            docker-logs.txt
            e2e-results.json

      - name: Cleanup containers
        if: always()
        run: docker-compose down -v

  # Stage 6: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start test environment
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Create performance test script
        run: |
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check } from 'k6';

          export let options = {
            stages: [
              { duration: '30s', target: 10 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
          };

          export default function() {
            // Test health endpoint
            let healthRes = http.get('http://localhost:8100/health');
            check(healthRes, {
              'health status is 200': (r) => r.status === 200,
              'health response time < 100ms': (r) => r.timings.duration < 100,
            });

            // Test token minting
            let tokenRes = http.post('http://localhost:8100/mint', 
              JSON.stringify({
                agent_id: `test_agent_${__VU}_${__ITER}`,
                credits: 5.0
              }), {
                headers: { 'Content-Type': 'application/json' },
              });
            
            check(tokenRes, {
              'token mint status is 200': (r) => r.status === 200,
              'token mint response time < 200ms': (r) => r.timings.duration < 200,
            });

            if (tokenRes.status === 200) {
              let token = JSON.parse(tokenRes.body).token;
              
              // Test data query
              let dataRes = http.get('http://localhost:8100/data/price?pair=BTCUSDT', {
                headers: { 'Authorization': `Bearer ${token}` },
              });
              
              check(dataRes, {
                'data query status is 200': (r) => r.status === 200,
                'data query response time < 500ms': (r) => r.timings.duration < 500,
              });
            }
          }
          EOF

      - name: Run performance tests
        run: |
          k6 run performance-test.js --summary-export=performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

  # Stage 7: Security Tests
  security-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start test environment
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Install security testing tools
        run: |
          pip install requests
          sudo apt-get update
          sudo apt-get install -y sqlmap

      - name: Run security tests
        run: |
          chmod +x .github/scripts/security-tests.sh
          .github/scripts/security-tests.sh

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        with:
          name: security-test-results
          path: security-results.json

  # Stage 8: Deployment Tests
  deployment-tests:
    runs-on: ubuntu-latest
    needs: [e2e-tests, performance-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker build optimization
        run: |
          docker build -t squidpro-api:ci squidpro-api/
          docker build -t collector-crypto:ci collector-crypto/
          
          echo "✅ Docker builds successful"

      - name: Test production configuration
        run: |
          # Test with production-like environment variables
          export SQUIDPRO_SECRET=production_secret_would_go_here
          export STELLAR_NETWORK=mainnet
          export PRICE_PER_QUERY_USD=0.01
          
          # Validate configuration loading
          cd squidpro-api
          python -c "
          import os
          assert os.getenv('SQUIDPRO_SECRET') == 'production_secret_would_go_here'
          assert os.getenv('STELLAR_NETWORK') == 'mainnet'
          assert float(os.getenv('PRICE_PER_QUERY_USD')) == 0.01
          print('✅ Production configuration valid')
          "

  # Final Stage: Reporting
  test-report:
    runs-on: ubuntu-latest
    needs: [code-quality, database-tests, unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test report
        run: |
          echo "# SquidPro CI/CD Test Report" > test-report.md
          echo "**Date:** $(date)" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "" >> test-report.md
          
          echo "## Test Results Summary" >> test-report.md
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> test-report.md
          echo "- Database Tests: ${{ needs.database-tests.result }}" >> test-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
          echo "" >> test-report.md
          
          echo "## Artifacts Generated" >> test-report.md
          find . -name "*.json" -o -name "*.txt" -o -name "*.log" | while read file; do
            echo "- $file" >> test-report.md
          done

      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: final-test-report
          path: test-report.md